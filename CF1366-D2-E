#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define ll long long
#define lst(x) x.size()-1
#define ld long double
#define pr pair<ll,ll>
#define loop(i, n) for(int i=0 ; i<n ; ++i)
#define rep(i, x, n) for(int i=x ; i<=n ; ++i)
#define iteloop(type, data, name, it) for(type<data>::iterator it=name.begin() ;it!=name.end() ; ++it)

using namespace __gnu_pbds;
using namespace std;

template<typename T>
using os = tree<T, null_type, less<T>, rb_tree_tag,
        tree_order_statistics_node_update>;
const int N = 2e5 + 5, M = 1e1 + 5, MOD = 998244353, OO = 2e9;
int a[N],b[N],n,m;
int main() {
    cin.sync_with_stdio(false), cin.tie(0), cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("std/in.txt", "rt", stdin);
    // freopen("in.txt", "wt" , stdout);
#endif // ONLINE_JUDGE
    scanf("%d%d",&n,&m);
    int mn=OO;
    loop(i,n) {
        scanf("%d", a + i);
        mn = min(mn,a[i]);
    }
    map<int,bool> has;
    loop(i,m) {
        scanf("%d", b + i);
        has[b[i]]=true;
    }
    if(mn<b[0]){
        puts("0");
        return 0;
    }
    map<int,int> lstInd;
    loop(i,m){
        lstInd[b[i]]=-1;
    }
    loop(i,n){
        if(has[a[i]])lstInd[a[i]]=i;
    }
    vector<ll> indices;
    loop(i,m){
        if(lstInd[b[i]]==-1){
            puts("0");
            return 0;
        }
        indices.push_back(lstInd[b[i]]);
    }
    if(!is_sorted(indices.begin(),indices.end())){
        puts("0");
        return 0;
    }
    int it=0;
    vector<int> fuck;
    int lst=-1;
    for(int i=indices[0] ; i<n and it<m ; i++){
        if(i==indices[it]){
            if(lst!=-1){
                fuck.push_back(lst);
            }
            lst=-1;
            it++;
        }
        if(a[i]<b[it-1]){
            puts("0");
            return 0;
        }
        if(a[i]<b[it]){
            lst=i;
        }
    }
    for(int i=indices.back() ; i<n ; i++){
        if(a[i]<b[m-1]){
            puts("0");
            return 0;
        }
    }
    ll res=1;
    indices.erase(indices.begin());
    loop(i,indices.size()){
        res*=indices[i] - fuck[i];
        res%=MOD;
    }
    printf("%lld\n",res);
}
