#include <bits/stdc++.h>
/*#include <ext/pb_ds/assoc_container.hpp>
#include <unistd.h>*/

#define ll long long
#define lst(x) x.size()-1
#define F first
#define S second
#define ld long double
#define pr pair<int,int>
#define prr pair<pr,pr>
#define all(x) x.begin() , x.end()
#define loop(i, n) for(int i=0 ; i<n ; ++i)
#define rep(i, x, n) for(int i=x ; i<=n ; ++i)
#define iteloop(type, data, name, it) for(type<data>::iterator it=name.begin() ;it!=name.end() ; ++it)

//using namespace __gnu_pbds;
using namespace std;

/*template<typename T>
using os = tree<T, null_type, less_equal<T>, rb_tree_tag,
        tree_order_statistics_node_update>;*/

const ll N = 1e5+5,M=1e6+5,level=25,MOD=1e9+7,MX=1e18+5,MN=-MX;
int arr[N],nxtMx[N],bfrMx[N],val[N];
int main() {
#ifdef CLION
    freopen("std/in.txt", "rt", stdin);
    //freopen("std/out.txt", "wt", stdout);
#else
    //freopen("minmax.in", "rt", stdin);
    //freopen("output.txt", "wt", stdout);
#endif
    int n,q;
    scanf("%d%d",&n,&q);
    loop(i,n){
        scanf("%d",&arr[i]);
    }
    loop(i,n-1){
        val[i]=abs(arr[i]-arr[i+1]);
    }
    stack<pr> stk;
    loop(i,n){
        while(!stk.empty() and stk.top().first<val[i]){
            stk.pop();
        }
        if(!stk.empty()){
            bfrMx[i]=stk.top().second;
        }else{
            bfrMx[i]=-1;
        }
        stk.push({val[i],i});
    }
    while(!stk.empty())stk.pop();
    for(int i=n-1 ; i>=0 ; i--){
        while(!stk.empty() and stk.top().first<=val[i]){
            stk.pop();
        }
        if(!stk.empty()){
            nxtMx[i]=stk.top().second;
        }else{
            nxtMx[i]=-1;
        }
        stk.push({val[i],i});
    }
    loop(j,q){
        int s,e;
        scanf("%d%d",&s,&e);
        s--;e--;
        ll ans=0;
        rep(i,s,e-1){
            ll before;
            if(bfrMx[i]<s){
                before=i-s+1;
            }else{
                before=i-bfrMx[i];
            }
            ll after;
            if(nxtMx[i]==-1 or nxtMx[i]>=e){
                after=e-i;
            }else{
                after=nxtMx[i]-i;
            }
            ans+=before*after*val[i];
        }
        printf("%lld\n",ans);
    }
}

