#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
#include <ext/pb_ds/detail/standard_policies.hpp>

#define pr pair<ll,ll>
#define loop(i,n) for(int i=0 ; i<n ; i++)
#define rep(i,x,n) for(ll i=x ; i<=n ; i++)
typedef long long ll;

using namespace std;
using namespace __gnu_pbds;

typedef tree<
        int,
        null_type,
        less_equal<ll>,
        rb_tree_tag,
        tree_order_statistics_node_update>
        ordered_set;


const int N = 1e6 + 5, MX = 2e5, MN = 0,MOD=1e4+7;
ll mn,mx;
vector<int> divs[N];
bool isPrime[N];
void sieve(){
    memset(isPrime,1,sizeof(isPrime));
    rep(i,2,N-1){
        if(isPrime[i]){
            for(int j=2*i ; j<N ; j+=i)isPrime[j]=0;
            ll div = mn/i;
            if(mn%i){
                div++;
            }
            ll st=div*i;
            for(ll j=st ; j<=mx ; j+=i)divs[j-mn].push_back(i);
        }
    }
}
int main() {
#ifndef ONLINE_JUDGE
    freopen("in.txt", "rt", stdin);
#endif
    // ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    scanf("%lld %lld",&mn,&mx);
    sieve();
    ll ans=0;
    rep(i,mn,mx){
        ll res=1;
        ll cur=i;
        priority_queue<int> pq;
        for(int x:divs[i-mn]){
            int cnt=0;
            while(cur%x==0){
                cur/=x;
                cnt++;
            }
            cnt++;
            pq.push(cnt);
            res*=cnt;
        }
        if(cur>1){
            pq.push(2);
            res*=2;
        }
        ans+=res;
        while(!pq.empty()){
            int s=pq.top();
            pq.pop();
            res/=s;
            s--;
            res*=s;
            if(res>1)
                ans+=res;
            if(s>1)pq.push(s);
        }
    }
    printf("%lld\n",ans);
    return 0;
}
