#include <bits/stdc++.h>

using namespace std;

const int INF = 1e9;
const int N = 15 + 2;
const int MSK = (1 << N) + 1;
vector<int> adj[N];
int vis[N];
int dist[N][N];
int memo[MSK];
int in[N];
long long sum;
int n, m;

int solve(int msk) {
    if (msk == 0)return 0;
    int &ret = memo[msk];
    if (ret != -1)return ret;
    ret = INF;
    for (int i = 0; i < n; i++) {
        if (msk & (1 << i)) {
            for (int j = 0; j < n; j++) {
                if (i == j)continue;
                if (msk & (1 << j)) {
                    ret = min(ret, solve(msk - (1 << i) - (1 << j)) + dist[i][j]);
                }
            }
        }
    }
    return ret;
}

void dfs(int u) {
    if (vis[u])return;
    vis[u] = true;
    for (int nxt : adj[u]) {
        dfs(nxt);
    }
}

int main() {
#ifndef ONLINE_JUDGE
    freopen("in.txt", "r", stdin);
//    freopen("out.in", "w", stdout);
#endif

    ios_base::sync_with_stdio(0);
    cin.tie(0), cout.tie(0);

    memset(dist,'?',sizeof(dist));

    cin >> n >> m;
    int x, y, w;
    for (int i = 0; i < m; i++) {
        cin >> x >> y >> w;
        x--, y--;
        adj[x].push_back(y);
        adj[y].push_back(x);
        sum += w;
        if (x != y) {
            dist[y][x] = dist[x][y] = min(dist[x][y], w);
            in[x]++, in[y]++;
        }
    }

    for (int k = 0; k < n; k++) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
            }
        }
    }

    dfs(0);

    for (int i = 0; i < n; i++) {
        if (adj[i].size()>0 && !vis[i]) {
            cout << -1 << endl;
            return 0;
        }
    }

    memset(memo, -1, sizeof memo);
    int msk = 0;
    for (int i = 0; i < n; i++) {
        if (in[i] & 1) {
            msk |= (1 << i);
        }
    }


    cout << sum + solve(msk) << "\n";

    return 0;
}
