#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#define loop(i,n) for(ll i=0 ; i<n ; i++)
#define rep(i,x,n) for(ll i=x ; i<=n ; i++)
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
const ll N=3e5 + 5,M=5e5+5, MOD=1e9 + 7 , MAX=5e6;

bool notPrime[MAX];
int primes[MAX];

void seive(int n){
    notPrime[1]=1;
    notPrime[0]=1;
    for(int i=2 ; i<n ; i++){
        if(!notPrime[i])
            for(int j=2*i ; j<n ; j+=i)
                notPrime[j]=1;
    }
}


// C function for extended Euclidean Algorithm (used to
// find modular inverse.
ll gcdExtended(ll a, ll b, ll *x, ll *y)
{
    // Base Case
    if (a == 0)
    {
        *x = 0, *y = 1;
        return b;
    }

    ll x1, y1; // To store results of recursive call
    ll gcd = gcdExtended(b%a, a, &x1, &y1);

    // Update x and y using results of recursive
    // call
    *x = y1 - (b/a) * x1;
    *y = x1;
    return gcd;

}

// Function to find modulo inverse of b. It returns
// -1 when inverse doesn't
ll modInverse(ll b, ll m)
{
    ll x, y; // used in extended GCD algorithm
    ll g = gcdExtended(b, m, &x, &y);

    // Return -1 if b and m are not co-prime
    if (g != 1)
        return -1;

    // m is added to handle negative x
    return (x%m + m) % m;
}

// Function to compute a/b under modlo m
ll modDivide(ll a, ll b, ll m)
{
    a = a % m;
    ll inv = modInverse(b, m);
    return (inv * a) % m;
}

ll val[N];
bool isSame(int i,int j){
    return modDivide(val[i],primes[j],MOD) == modDivide(val[j],primes[i],MOD);
}
int par[N],cmpSize[N];
int getPar(int x){
    if(par[x]==x)return x;
    return par[x]=getPar(par[x]);
}
void unify(int x,int y){
    int parX=getPar(x);
    int parY=getPar(y);
    if(parX==parY)return;
    if(cmpSize[parX]>cmpSize[parY]){
        cmpSize[parX]+=cmpSize[parY];
        par[parY]=parX;
    }else{
        cmpSize[parY]+=cmpSize[parX];
        par[parX]=parY;
    }
}
int n,m;
pair<int,int> edges[N];
int ans[N];
set<int> graph[N];
int init=1e6;
void dfs(int u,int p=-1){
    if(p==-1){
        ans[u]=init;
    }else{
        ans[u]=ans[p]+1;
    }
    for(auto v:graph[u]){
        if(v==p)continue;
        dfs(v,u);
    }
}
int main() {
#ifndef ONLINE_JUDGE
    freopen("in.txt", "rt", stdin);
#endif
    ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    seive(MAX);
    int ind=0;
    for(int i=0 ; i<MAX ; i++){
        if(!notPrime[i]){
            primes[ind]=i;
            ind++;
        }
    }
    cin>>n>>m;
    rep(i,1,n){
        par[i]=i;
        cmpSize[i]=1;
        val[i]=1;
    }
    loop(i,m){
        int u,v;
        cin>>u>>v;
        val[u]*=primes[v];
        val[v]*=primes[u];
        val[u]%=MOD;
        val[v]%=MOD;
        edges[i]={u,v};
    }
    loop(i,m){
        int u=edges[i].first;
        int v=edges[i].second;
        if(isSame(u,v)){
            unify(u,v);
        }
    }
    loop(i,m){
        int u=edges[i].first;
        int v=edges[i].second;
        int paru=getPar(u);
        int parv=getPar(v);
        if(paru!=parv){
            graph[paru].insert(parv);
            graph[parv].insert(paru);
        }
    }
    int st=-1;
    set<int> parents;
    rep(i,1,n){
        parents.insert(getPar(i));
    }
    int numOfTwo=0;
    for(auto p:parents){
        if(graph[p].size()>2){
            cout<<"NO"<<endl;
            return 0;
        }else if(graph[p].size()==2)numOfTwo++;
        else st=p;
    }
    if(numOfTwo!=parents.size()-2 && parents.size()!=1){
        cout<<"NO"<<endl;
        return 0;
    }
    dfs(st);
    cout<<"YES"<<endl;
    rep(i,1,n){
        cout<<ans[getPar(i)]<<" ";
    }
    cout<<endl;
}
