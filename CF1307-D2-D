#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define pr pair<int,int>
#define loop(i,n) for(ll i=0 ; i<n ; i++)
#define rep(i,x,n) for(ll i=x ; i<=n ; i++)
#define PI 3.141592654
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
const int N=2e5 + 5,M=1e5+5, MOD=1e9 + 7 , OO=2e9;

vector<int> graph[N];
int n,m,src[N],dist[N],k;
int vis[N],vid;
void fillShortest(int arr[],int s) {
    vid++;
    queue<int> q;
    q.push(s);
    vis[s]=vid;
    int lvl=0;
    while(!q.empty()){
        int sz=q.size();
        while(sz--){
            int u=q.front();
            q.pop();
            arr[u]=lvl;
            for(auto v:graph[u]){
                if(vis[v]==vid)continue;
                vis[v]=vid;
                q.push(v);
            }
        }
        lvl++;
    }
}

int main() {
#ifndef ONLINE_JUDGE
    freopen("in.txt", "rt", stdin);
#endif
    ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    cin>>n>>m>>k;
    vector<int> good(k);
    loop(i,k){
        cin>>good[i];
    }
    loop(i,m){
        int u,v;
        cin>>u>>v;
        graph[u].push_back(v);
        graph[v].push_back(u);
    }
    fillShortest(src,1);
    fillShortest(dist,n);
    rep(i,1,n){
       // cout<<src[i]<<" "<<dist[i]<<endl;
    }
    vector<pr> frst(k),scnd(k),diff(k);
    vector<int> mx(k);
    loop(i,k){
        frst[i].first = src[good[i]];
        scnd[i].first = dist[good[i]];
        diff[i].first = src[good[i]]-dist[good[i]];
        frst[i].second = scnd[i].second = diff[i].second = i;
    }
    sort(diff.begin(),diff.end());
    int mxN=0;
    int ans=0;
    for(int i=k-1 ; ~i ; i--){
        int ind=good[diff[i].second];
        if(i!=k-1)
            ans = max(ans,src[ind]+mxN);
        mxN = max(mxN , dist[ind]);
    }
   // cout<<ans<<endl;
    cout<<min(dist[1],ans+1)<<endl;
}
