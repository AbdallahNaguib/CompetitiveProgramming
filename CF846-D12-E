#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#define loop(i,n) for(ll i=0 ; i<n ; i++)
#define rep(i,x,n) for(ll i=x ; i<=n ; i++)
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

const ll N=1e5 + 5,M=5e5+5, MOD=1e9 + 7 , MAX=5e6,OO=1e9;

// the problem is find maximum edge on path with updates of edges
// heavy edge has more than half the nodes

int n;
ll par[N],lvl[N],has[N],need[N],edgePar[N];
vector<int> nodesInLvl[N];
ll mxLvl=1;
int main() {
#ifndef ONLINE_JUDGE
    freopen("in.txt", "rt", stdin);
#endif
    ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    cin>>n;
    rep(i,1,n){
        cin>>has[i];
    }
    rep(i,1,n){
        cin>>need[i];
    }
    lvl[1]=1;
    rep(j,2,n){
        ll p,val;
        cin>>p>>val;
        par[j]=p;
        edgePar[j]=val;
        lvl[j]=lvl[p]+1;
        mxLvl=max(mxLvl,lvl[j]);
        nodesInLvl[lvl[j]].push_back(j);
    }
    for(int i=mxLvl ; i>0 ; --i){
        for(auto cur:nodesInLvl[i]) {
            if(has[cur]>need[cur]){
                has[par[cur]]+=has[cur]-need[cur];
            }else{
                long double x=(need[cur]-has[cur])*(long double)edgePar[cur];
                if((long double)has[par[cur]] - x > -5e17)
                    has[par[cur]]-=(need[cur]-has[cur])*edgePar[cur];
                else{
                    cout<<"NO"<<endl;
                    return 0;
                }
            }
        }
    }
    if(has[1]>=need[1]){
        cout<<"YES"<<endl;
    }else{
        cout<<"NO"<<endl;
    }
}
