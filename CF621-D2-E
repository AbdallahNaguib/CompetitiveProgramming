import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.*;

/*
5 4 1 10
1 1 1 1 1*/
public class Main {
    final static int MOD = ((int) Math.pow(10, 9)) + 7;
    static InputReader scan = new InputReader();

    public static void main(String[] args) throws UnknownHostException {
        int n = scan.nextInt();
        int b = scan.nextInt();
        int k = scan.nextInt();
        int x = scan.nextInt();
        int[] fre = new int[10];
        Set<Integer> st = new HashSet<>();

        for (int i = 0; i < n; i++) {
            int dig = scan.nextInt();
            fre[dig]++;
            st.add(dig);
        }
        if (b == 1) {
            System.out.println(fre[k]);
            System.exit(0);
        }
        Matrix matrix = new Matrix(x);
        for (int i = 0; i < x; i++) {
            for (int j : st) {
                int res = (i * 10 + j) % x;
                matrix.arr[i][res] += fre[j]%MOD;
                matrix.arr[i][res] %= MOD;
            }
        }
      /*  for(int i=0 ; i<x ; i++){
            for(int j=0 ; j<x ; j++){
                System.out.print(matrix.arr[i][j]+" ");
            }
            System.out.println();
        }*/
        Matrix res = Matrix.pow(matrix, b - 1);
        long ans = 0L;
        for (int i : st) {
            ans += (fre[i]*res.arr[i % x][k]) % MOD;
            ans %= MOD;
        }
        System.out.println(ans);
    }

    static class Matrix {
        long arr[][];

        Matrix(int n) {
            arr = new long[n][n];
        }

        static Matrix pow(Matrix m, int n) {
            if (n == 1) return m;
            if (n % 2 == 0) {
                return pow(m.multiply(m), n / 2);
            } else {
                return m.multiply(pow(m.multiply(m), n / 2));
            }
        }

        Matrix multiply(Matrix m2) {
            int n = arr.length;
            Matrix res = new Matrix(n);
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    long sum = 0L;
                    for (int k = 0; k < n; k++) {
                        sum += (this.arr[i][k] * m2.arr[k][j]) % MOD;
                        sum %= MOD;
                    }
                    res.arr[i][j] = sum;
                }
            }
            return res;
        }
    }

    static class InputReader {
        private BufferedReader reader;
        private StringTokenizer tokenizer;

        InputReader() {
            reader = new BufferedReader(new InputStreamReader(System.in), 32768);
            tokenizer = null;
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

    }
}
